{"version":3,"sources":["components/NameBox.js","components/LinkList.js","App.js","serviceWorker.js","index.js"],"names":["TagLine","styled","h3","props","show","NameBox","state","tags","currentIdx","showTag","componentDidMount","tagInterval","setInterval","cycleTags","componentWillUnmount","clearTimeout","animationTimer","clearInterval","setShowTag","bool","setState","changeTag","length","setTimeout","this","className","PureComponent","linkItems","key","flavorText","link","linkText","LinkList","map","linkObj","target","rel","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2fAGA,IAGMA,EAAUC,IAAOC,GAAV,KAIA,SAACC,GAAD,OAAYA,EAAMC,KAAO,EAAI,KA0D3BC,E,4MAlDbC,MAAQ,CACNC,KAAM,CACJ,2CACA,6CAEFC,WAAY,EACZC,SAAS,G,EAGXC,kBAAoB,WAClB,EAAKC,YAAcC,YAAY,EAAKC,UAAW,M,EAGjDC,qBAAuB,WACrBC,aAAa,EAAKC,gBAClBC,cAAc,EAAKN,c,EAGrBO,WAAa,SAACC,GACZ,EAAKC,SAAS,CAAEX,QAASU,K,EAG3BE,UAAY,WAAO,IAAD,EACa,EAAKf,MAA1BE,EADQ,EACRA,WAAYD,EADJ,EACIA,KACpB,EAAKa,SAAS,CACZZ,WAAYA,IAAeD,EAAKe,OAAS,EAAI,EAAId,EAAa,K,EAIlEK,UAAY,WACV,EAAKK,YAAW,GAChBH,aAAa,EAAKC,gBAClB,EAAKA,eAAiBO,YAAW,WAC/B,EAAKF,YACL,EAAKH,YAAW,KACf,M,uDAGK,IAAD,EAC+BM,KAAKlB,MAAnCC,EADD,EACCA,KAAMC,EADP,EACOA,WAAYC,EADnB,EACmBA,QAC1B,OACE,yBAAKgB,UAAU,aACb,4BAzDU,mBA0DV,4BAzDU,4BA0DV,kBAACzB,EAAD,CAASI,KAAMK,GAAUF,EAAKC,S,GA7ChBkB,iBCfhBC,EAAY,CAChB,CACEC,IAAK,QACLC,WAAY,wBACZC,KAAM,yBACNC,SAAU,0BAQZ,CACEH,IAAK,WACLC,WAAY,sBACZC,KAAM,4CACNC,SAAU,aAqBCC,EAJE,WACf,OAAO,yBAAKP,UAAU,aAAwBE,EAb/BM,KAAI,SAACC,GAClB,OACE,0BAAMN,IAAKM,EAAQN,IAAKH,UAAU,aAC/BS,EAAQL,WACT,uBAAGM,OAAO,SAASC,IAAI,sBAAsBC,KAAMH,EAAQJ,MACxDI,EAAQH,gBCXJO,EAXH,WACV,OACE,oCACE,8BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,uBAAGb,UAAU,gBAAgB,OCFfc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d80dfd9b.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport styled from 'styled-components';\n\nconst greetLine = \"Hey, I'm Berfin\";\nconst descrLine = \"# I'm a Product Designer\";\n\nconst TagLine = styled.h3`\n  min-height: 2em;\n  font-size: medium;\n  font-weight: 600;\n  opacity: ${(props) => (props.show ? 1 : 0)};\n  transition: opacity 375ms ease-out;\n  @media (max-width: 767px) {\n    min-height: 4.875em;\n  }\n`;\n\nclass NameBox extends PureComponent {\n  state = {\n    tags: [\n      \"I'm currently designing freelance @ Gnar\",\n      'Ask me about my dogs Falafel, and Tantuni',\n    ],\n    currentIdx: 0,\n    showTag: true,\n  };\n\n  componentDidMount = () => {\n    this.tagInterval = setInterval(this.cycleTags, 5000);\n  };\n\n  componentWillUnmount = () => {\n    clearTimeout(this.animationTimer);\n    clearInterval(this.tagInterval);\n  };\n\n  setShowTag = (bool) => {\n    this.setState({ showTag: bool });\n  };\n\n  changeTag = () => {\n    const { currentIdx, tags } = this.state;\n    this.setState({\n      currentIdx: currentIdx === tags.length - 1 ? 0 : currentIdx + 1,\n    });\n  };\n\n  cycleTags = () => {\n    this.setShowTag(false);\n    clearTimeout(this.animationTimer);\n    this.animationTimer = setTimeout(() => {\n      this.changeTag();\n      this.setShowTag(true);\n    }, 500);\n  };\n\n  render() {\n    const { tags, currentIdx, showTag } = this.state;\n    return (\n      <div className=\"link-list\">\n        <h1>{greetLine}</h1>\n        <h2>{descrLine}</h2>\n        <TagLine show={showTag}>{tags[currentIdx]}</TagLine>\n      </div>\n    );\n  }\n}\n\nexport default NameBox;\n","import React from 'react';\n\nconst linkItems = [\n  {\n    key: 'email',\n    flavorText: 'shoot me an email at ',\n    link: 'ayhanberfin1@gmail.com',\n    linkText: 'ayhanberfin1@gmail.com',\n  },\n  // {\n  //   key: 'github',\n  //   flavorText: 'check out my code on ',\n  //   link: 'https://github.com/htcicek',\n  //   linkText: 'github',\n  // },\n  {\n    key: 'linkedin',\n    flavorText: 'connect with me on ',\n    link: 'https://www.linkedin.com/in/berfin-ayhan/',\n    linkText: 'linkedin',\n  }\n];\n\nconst linkRender = (linkArr) => {\n  return linkArr.map((linkObj) => {\n    return (\n      <span key={linkObj.key} className=\"link-item\">\n        {linkObj.flavorText}\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={linkObj.link}>\n          {linkObj.linkText}\n        </a>\n      </span>\n    );\n  });\n};\n\nconst LinkList = () => {\n  return <div className=\"link-list\">{linkRender(linkItems)}</div>;\n};\n\nexport default LinkList;\n","import React from 'react';\n\nimport './App.css';\n\nimport NameBox from './components/NameBox';\nimport LinkList from './components/LinkList';\n\nconst App = () => {\n  return (\n    <>\n      <main>\n        <NameBox />\n        <LinkList />\n      </main>\n      <p className=\"closeBracket\">{'}'}</p>\n    </>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'sanitize.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}